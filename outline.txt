* System level languages

  * C and pointers were a revolution -- Finally a HIGH level language

  * C++ -- Finally a language you had to be HIGH to appreciate

  * C# -- Finally a language that goes half way to making system programming tolerable

  * C++11 -- Finally a language worthy of both +'s

  * ObjectiveC -- Like C, but without all that conjecture

* Scripting Languages

  * Bash -- I know computers are dumb but...

  * Perl -- zomg wtf does that say?

  * PHP -- zomg it does what in a function?

  * Python -- whitespace ... bah

  * Ruby -- Just.. put those statements wherever you think they look nicest

  * node.js -- No really, servers can be unintelligible and poorly defined too

* Rust for your brain

  * Explicit mutability reduces need for unit tests

    * Explicit Mutability means not having to unit test whether
      code accidentally modifies things it should not.

    * The compiler can warn you when you've made something mutable
      that doesn't need to be!

  * Strong typing means never accidentally assuming what sort of
    object you have.

  * Trait system gives some flexibility of dynamic languages back
  
     * Works a bit like C++ templates (UGH)
     
     * Feels more like full featured abstract generic programming.

     * Calling it traits helps you orient your brain toward what is
       appropriate in a trait vs. what might be better in macros.

  * "Fearless Concurrency" -- Go ahead and make a thread, we dare ya

    * Explicit mutability helps here too

    * Sync/Send traits are useful for knowing when one needs to wrap
      objects in mutexes or shared pointers.

  * Pick your safeguards

    * If you really need to, you can have runtime rather than compile time mutability.

    * By making safe the default, most of the time you can code giant refactors
      without worrying too much about whether what you did has emergent behaviors.

  * Garbage Collector? We don't need no steenking..

    * Actually... We do. When two pieces of code own one object.. Rc.

    * Being able to write most of the code w/o worry of GC is nice.

        Knowing that if you don't use any GC'd types, you don't do any GC,
        but still getting all the crash safety of the Python/Ruby/etc. dynamic world
        is a Rust super power.

  * Coming back to Python

    * One realizes after doing a lot of rust, that Python is just all Rc<>'s.

    * One also misses the Rust compiler's helpful hints

  * Learning Go after Rust

    * Go lacking generics _hurts_ my brain.

    * Go's concurrency is a lot smoother to grasp.

      * Rust "Futures" and "Tokio" lagging Go on ease of use but improving quickly.

  * Coming back to C

    * Aghhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh I'm scared to change anything

    * Pointers feel way too loose and easy to mess up. Can't even.

  * Coming back to C++

    * Templates feel very opaque.

    * Rust has a strong community, C++ is so big and wide, hard to find "the truth".

    * No "cargo" for libraries -- your OS has it, or you are building yourself.

 * Rust for your team

   * Programming languages aren't just for computers

     * Being explicit helps a team be clear with eachother.

     * English/Chinese/Spanish/Hindi are all terrible at representing
       abstract concepts succinctly and clearly.

   * Finding bugs at compile time frees team up from extra load
     of finding bugs at runtime.

   * How something gets built and deployed matters

     * Ruby/Perl/Python can be a dependency nightmare

       * gem/cpan/pip are all great but break down in complex scenarios

     * C/C++ have 30+ years of tooling, and still we need distro
       tooling on top of that.

     * Go is heavily git-centric and far more evolved than others.

     * Rust builds use cargo, crates.io is well maintained.

       * Static linking makes one binary to run almost anywhere.

       * Static linking makes a giant ball of security patching challenge.

 * Rust for justice

   * Firefox is a browser aimed at freedom and privacy.

   * Firefox is an awesome browser -- I never stopped using it

   * Mozilla Foundation are nice people -- I mostly never stopped believing

   * Firefox Quantum beta is under way now -- Go download and test it and you are
     running a browser engine written mostly in Rust!

   * Why would they do that?

     * Firefox's C++-bound memory model is basically why Google Chrome exists.

     * Smart people figured if they could do less garbage collection and more
       scoped memory releases, they'd be able to beat Chrome's process based
       memory model.
